var lunrIndex = [{"id":"changelog","title":"Changelog","body":"All notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https:\/\/keepachangelog.com\/en\/1.0.0\/),\nand this project adheres to [Semantic Versioning](https:\/\/semver.org\/spec\/v2.0.0.html).\n\n## [Unreleased]\n\n- None\n\n## [0.0.33] - 2024-03-21\n\n### Added\n\n- \\AKlump\\Drupal\\BatchFramework\\Batch\\OperationInterface::getRemainingTime\n- Previously the operation timeout was handled exclusively by \\AKlump\\Drupal\\BatchFramework\\Batch\\Operator::handleOperation. Now the operation class will receive the timeout value as `$batch_context['max_execution_seconds']`, which will allow it to exit early in respect to that value, if it so chooses.\n- \\AKlump\\Drupal\\BatchFramework\\Batch\\DrupalBatchAPIOperationBase::getRemainingTime was added to take advantage of these changes; use this method in your child classes to handle an earlier exit based on timeout. Otherwise the Operator will manage time as before.\n\n## [0.0.28] - 2023-12-08\n\n### Changed\n\n- **`BatchDefinitionInterface::handleFailedBatch` has been updated with new parameters.**\n- Refactored the logic to handle failed batch operations in the DrupalBatchAPIBase class. A separate array for exceptions has been made and unnecessary keys from the batch results have been excluded. Changes were also made in the BatchDefinitionInterface and Operator as part of this update."},{"id":"readme","title":"Drupal Batch Framework (A Drupal Component)","body":"* [What are Drupal Components?](https:\/\/www.drupal.org\/docs\/core-modules-and-themes\/basic-structure-of-drupal#s-drupal-components)\n* This framework works with and uses a common interface for all Drupal versions.\n* [Drupal.org Batch API Docs](https:\/\/www.drupal.org\/docs\/7\/api\/batch-api)\n\n## Installation\n\n1. Add this _composer.json_:\n\n    ```json\n    {\n      \"repositories\": [\n        {\n          \"type\": \"github\",\n          \"url\": \"https:\/\/github.com\/aklump\/drupal_batch_framework\"\n        }\n      ]\n    }\n    ```\n\n1. `composer require aklump\/drupal-batch-framework:^0`\n\n## Usage\n\nYou will use this framework to create batches of operations. A batch contains\none or more operations.\n\n1. Create a batch class by\n   extending `\\AKlump\\Drupal\\BatchFramework\\DrupalBatchAPIBase` or\n   implementing `\\AKlump\\Drupal\\BatchFramework\\BatchDefinitionInterface`.\n2. Create one or more operations by extending `\\AKlump\\Drupal\\BatchFramework\\DrupalBatchAPIOperationBase` or\n   implementing `\\AKlump\\Drupal\\BatchFramework\\OperationInterface`.\n3. Add the operation(s) to your batch class; see below.\n4. Create a form to trigger the batch.\n\n## File Structure\n\nSuggested class structure within _my_module\/_\n\n```php\n.\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 Batch\n        \u251c\u2500\u2500 BatchDefinitions\n        \u2502\u00a0\u00a0 \u2514\u2500\u2500 FooBatch.php\n        \u2514\u2500\u2500 Operations\n            \u251c\u2500\u2500 BarOperation.php\n            \u2514\u2500\u2500 BazOperation.php\n        \u251c\u2500\u2500 QueueDefinitions\n            \u2514\u2500\u2500 FooQueue.php\n```\n\n## Batch Definition Example\n\nYou may or many not need to pass anything to the class, the constructor is\noptional, yet this example shows how it can be done.\n\n```php"},{"id":"cron_jobs","title":"Simple Cron Jobs","body":"2. Create an operation class encapsulating your cron job.\n3. (You will not be using a batch class, just a single operation.)\n4. In a _hook\\_cron_ implementation, pass an instance of the operation to `CronCreateJobFromOperation`.\n5. Set the maximum seconds you want to spend on the operation.\n\n```php\nfunction my_module_cron() {\n  $foo = new FooOperation('lorem', 'ipsum');\n  (new CronCreateJobFromOperation($foo))\n    ->setMaxTime(30)\n    ->do();\n}\n```\n\n* See also [Queue Cron Jobs](@queue_cron_jobs)"},{"id":"queue_cron_jobs","title":"Working With Cron Queues","body":"1. Create a queue definition by implementing `\\AKlump\\Drupal\\BatchFramework\\QueueDefinitionInterface`\n3. Do implement `hook_cron`  as shown below with your queue definition class.\n4. Fill the queue using operations (see below).\n5. Ensure cron is running.\n2. Note this strategy does not use `hook_cron_queue_info`.\n\n```php\nclass FooQueue implements \\AKlump\\Drupal\\BatchFramework\\QueueDefinitionInterface {\n\n  use \\AKlump\\Drupal\\BatchFramework\\Traits\\GetLabelByClassnameTrait;\n\n  public function getName(): string {\n    return 'foo_queue';\n  }\n\n  public function getWorker(): callable {\n    return (new \\AKlump\\Drupal\\BatchFramework\\Queue\\QueueWorker())->setLoggerChannel($this->getLoggerChannel());\n  }\n\n  public function getLoggerChannel(): string {\n    return $this->getLabel();\n  }\n\n}\n```\n\n```php\n\/**\n * Implements hook_cron_queue_info().\n *\/\nfunction my_module_cron_() {\n  (new CronCreateJobFromQueue(new FooQueue()))\n    ->setMaxTime(30)\n    ->do();\n}\n```\n\n### Add an Item to the Queue\n\nThe most important is to ensure you add the operation instance that will process the item to the queue item as `operation`.\n\n```php\n$queue_name = (new FooQueue())->getName();\n$queue = \\DrupalQueue::get($queue_name);\n$queue->createQueue();\n\n$item = [\n  \\AKlump\\Drupal\\BatchFramework\\QueueItemInterface::OPERATION => new BarOperation(),\n  'key' => 'data',\n  'key2' => 'data2'\n];\nif (FALSE === $queue->createItem($item)) {\n  $logger_channel = (new FooQueue())->getLoggerChannel();\n  $logger = (new \\AKlump\\Drupal\\BatchFramework\\Helpers\\GetLogger(new \\AKlump\\Drupal\\BatchFramework\\DrupalMode()))($logger_channel);\n  $logger->error(\"Failed to queue item\");\n}\n\n```\n\n### The Operation Class\n\n* If the operation throws any exception the item remains in the queue.\n* If the operation times out the item remains in the queue.\n* If the operation returns `getProgressRatio()` < 1 on the final pass, the item remains in the queue.\n* The queue item is available in `$this->context['results'][QueueWorkerInterface::ITEMS]`; see `CronOperation::process`\n\n```php"}]